name: K6 Load Test on Load-Test Branch

on:
  push:
    branches:
      - load-test
  workflow_dispatch:

jobs:
  load-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Verify Script Exists
        run: |
          test -f load-tests/script.js || {
            echo "Error: load-tests/script.js not found!"
            exit 1
          }

      - name: Install K6
        run: |
          curl -L https://github.com/grafana/k6/releases/download/v0.52.0/k6-v0.52.0-linux-amd64.tar.gz | tar xz
          sudo mv k6-v0.52.0-linux-amd64/k6 /usr/local/bin/

      - name: Create Results Directory
        run: mkdir -p k6-results

      - name: Run K6 Load Test
        env:
          NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
        run: |
          k6 run load-tests/script.js \
            --out json=k6-results/raw.json \
            --summary-export=k6-results/summary.json || echo "K6 exited with non-zero code"

      - name: Process Test Results
        if: always()
        run: |
          echo "Processing test results..."
          if [ -f k6-results/summary.json ]; then
            jq -r '.metrics | to_entries | .[] | select(.value.thresholds) | "\(.key): \(.value.values.rate)"' k6-results/summary.json > k6-results/metrics.txt || echo "Error processing metrics"
            echo "Performance Summary:" >> k6-results/metrics.txt
            jq -r '.metrics.http_req_duration.values | "Avg Response Time: \(.avg)ms\nP95: \(.\"p(95)\")ms\nP99: \(.\"p(99)\")ms"' k6-results/summary.json >> k6-results/metrics.txt || echo "Error processing duration metrics"
          else
            echo "No test results found" > k6-results/metrics.txt
          fi

      - name: Generate Enhanced HTML Report
        if: always()
        run: |
          cat << EOF > k6-results/report.html
          <!DOCTYPE html>
          <html>
          <head>
            <title>K6 Load Test Results</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              .metrics { background: #f5f5f5; padding: 15px; border-radius: 5px; }
              .threshold { margin: 10px 0; padding: 10px; border-left: 4px solid #4CAF50; }
              .threshold.failed { border-left-color: #f44336; }
              .performance { margin-top: 20px; }
            </style>
          </head>
          <body>
            <h1>K6 Load Test Results</h1>
            <div class="metrics">
              <h2>Test Metrics</h2>
              <pre>$(cat k6-results/metrics.txt)</pre>
            </div>
            <div class="performance">
              <h2>Raw Test Data</h2>
              <pre>$(cat k6-results/summary.json)</pre>
            </div>
          </body>
          </html>
          EOF

      - name: Upload K6 Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-test-results
          path: k6-results/
          retention-days: 90

      - name: Analyze Test Results
        if: always()
        run: |
          if [ -f k6-results/summary.json ]; then
            FAILED_THRESHOLDS=$(jq -r '.metrics | to_entries | .[] | select(.value.thresholds | any(.ok | not)) | .key' k6-results/summary.json || echo "")
            if [ ! -z "$FAILED_THRESHOLDS" ]; then
              echo "❌ Load test failed - Thresholds crossed for:"
              echo "$FAILED_THRESHOLDS"
              exit 1
            else
              echo "✅ Load test passed - All thresholds met"
            fi
          else
            echo "⚠️ No test results available for analysis"
            exit 1
          fi
